# bump: meta-version /META_VERSION="(.*)"/ https://github.com/ZOSOpenTools/meta.git|semver:^0
META_VERSION="0.8.2"

export ZOPEN_BUILD_LINE="DEV"
export ZOPEN_DEV_URL="https://github.com/ZOSOpenTools/meta.git"
export ZOPEN_DEV_DEPS="git gzip make tar bash zoslib help2man perl curl grep groff coreutils"

export ZOPEN_RUNTIME_DEPS="gpg jq curl"

export ZOPEN_CONFIGURE="skip"
export ZOPEN_MAKE="skip"
export ZOPEN_CHECK="zopen_check"
export ZOPEN_INSTALL="zopen_install"

export ZOPEN_META_DEV_ROOT="" # Set to test zopen directory if not testing system default

handle_error() {
  echo "$1" >&2
  exit 8
}

META_DEV_DIR="${PWD}/meta"
if [ -z "${ZOPEN_META_DEV_ROOT}" ] ; then
  echo "Ensuring no problematic symbolic links from earlier runs"
  if [ -d "${META_DEV_DIR}" ] && [ -L "${META_DEV_DIR}" ]; then
    handle_error "Error: ${META_DEV_DIR} is a symbolic link. Remove the link or set ZOPEN_META_DEV_ROOT."
  fi
else
  echo "Installation will not be performed - testing existing dev environment"

  printVerbose "Validate custom meta directory"
  [ -d "${ZOPEN_META_DEV_ROOT}" ] || handle_error "Error: ZOPEN_META_DEV_ROOT does not exist: ${ZOPEN_META_DEV_ROOT}"
  [ "$(basename "${ZOPEN_META_DEV_ROOT}")" = "meta" ] || handle_error "Error: ZOPEN_META_DEV_ROOT must point to a 'meta' directory"

  echo "Clean up existing meta directory"
  if [ -d "${META_DEV_DIR}" ]; then
    if [ ! -L "${META_DEV_DIR}" ]; then
      echo "Moving/archiving existing non-link directory"
      mv "${META_DEV_DIR}" "${META_DEV_DIR}-cloned"
    else
      echo "Removing existing symbolic link"
      rm "${META_DEV_DIR}"
    fi
  fi

  echo "Creating symbolic link to development root"
  ln -s "${ZOPEN_META_DEV_ROOT}" "${META_DEV_DIR}" || handle_error "Unable to create symbolic link"
fi

zopen_init()
{
  export PATH="$PWD/bin:$PATH"
  
  if ! myzopen=$( whence zopen ); then
    handle_error "Error - unable to find zopen in the PATH"
  fi
  [ "${myzopen}" == "${PWD}/bin/zopen" ] || handle_error "Error - unable to find local zopen at ${PWD}/bin/zopen"
}

zopen_check()
{
  WORK_DIR="${ZOPEN_ROOT}/work"
  INCLUDE_DIR="${ZOPEN_ROOT}/tests/include"
  mkdir -p "${WORK_DIR}"

  #
  # Set up environment
  #
  # shellcheck disable=SC1091
  . "${ZOPEN_ROOT}"/meta/.env

  # include helper script
  # shellcheck disable=SC1091
  . "${INCLUDE_DIR}/common.sh"

  # Display banner
  zopen_print_banner "Start Tests"


  checks="${ZOPEN_ROOT}"/tests/zopen_check_*
  echo "Found checks: ${checks}"
  for check in $checks ; do
    [ ! -x "${check}" ] \
      && echo "FAIL: ${check} (test script is not executable)" \
      && continue
      echo "Running: ${check}"
    "${check}" "${WORK_DIR}" "${INCLUDE_DIR}"
    rc=$?
    if [ ${rc} -gt 0 ]; then
      echo "FAIL: ${check}"
    else
      echo "PASS: ${check}"
    fi
  done
  return 0
}

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"

  pass=$( grep -E '^PASS: ' "${chk}" | wc -l)
  fail=$( grep -E '^FAIL: ' "${chk}"| wc -l)
  echo "actualFailures:$fail"
  echo "totalTests:$(( pass+fail ))"
  echo "expectedFailures:0"
}

zopen_install()
{
  set -e
  perlver=$(perl --version | head -2 | tail -1 | awk ' { print $4 }' | tr -d ',')
  perlrel=$(perl --version | head -2 | tail -1 | awk ' { print $6 }' | tr -d ',')
  if [ "$perlver" -lt 5 ] || [ "$perlrel" -lt 38 ]; then
    handle_error "Wrong version of Perl: $perlver.$perlrel (expected 5.38 or higher)"
  fi
  mkdir -p "$ZOPEN_INSTALL_DIR"
  if [ -z "$ZOPEN_META_DEV_ROOT" ]; then
    rm -rvf "$PWD/zotsampleport"
    rm -rvf "$PWD/.git"* "$PWD/.editorconfig"
  fi
  cp -rv "$PWD"/* "$ZOPEN_INSTALL_DIR"/
  mkdir -p "$ZOPEN_INSTALL_DIR/man/man1"
  zopen-help2man "$ZOPEN_INSTALL_DIR/man/man1"
  mkdir -p "$ZOPEN_INSTALL_DIR/ref"
  echo "HTML reference pages will be written to $ZOPEN_INSTALL_DIR/ref"
  for man in "$ZOPEN_INSTALL_DIR"/man/man1/*.1; do
    base=${man##*/}
    name=${base%%.1}
    html="$ZOPEN_INSTALL_DIR/ref/${name}.html"
    groff -m mandoc -Thtml -Wall "${man}" >"${html}"
  done
  set +e
}

zopen_append_to_setup() {
cat <<ZZ
  if [ -n "\$ZOPEN_ROOTFS" ] && [ -d "\$ZOPEN_ROOTFS" ] && [ -x "\$PWD/bin/zopen" ]; then
    \$PWD/bin/zopen init --refresh
  fi
ZZ
}

zopen_pre_terminate() {
  # Test setup of meta
  rm -rf "$ZOPEN_ROOT"/zopen_test
  cd "$ZOPEN_INSTALL_DIR"
  unset ZOPEN_ROOTFS
  rm -f .installed 
  # shellcheck disable=SC1091
  . ./.env
  zopen init -y "$ZOPEN_ROOT"/zopen_test
  # shellcheck disable=SC1091
  . "$ZOPEN_ROOT"/zopen_test/etc/zopen-config
  rm -rf .installed

  # Test refresh on an existing install
  timestamp1=$(stat -c %Y "$ZOPEN_ROOT/zopen_test/etc/zopen-config")
  # shellcheck disable=SC1091
  . ./.env # runs setup.sh which should now refresh the zopen-config
  timestamp2=$(stat -c %Y "$ZOPEN_ROOT/zopen_test/etc/zopen-config")
  
  # zopen-config timestamp should be updated
  if [ "$timestamp1" -ge "$timestamp2" ]; then
    printError "zopen-config did not get refreshed"
  fi
  rm -rf "$ZOPEN_ROOT"/zopen_test
  cd -
}

zopen_get_version()
{
  version="$(./bin/zopen --version 2>/dev/null)"
  echo "${version}" | head -1 | awk '{ print $4; }'
}
